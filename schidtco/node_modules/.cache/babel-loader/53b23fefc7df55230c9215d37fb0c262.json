{"ast":null,"code":"const initS3 = require('../utils/init-s3');\n\nconst getBucket = require('../utils/get-bucket');\n\nconst getFile = require('../utils/get-file');\n\nconst getHashFromKey = require('../utils/get-hash-from-key');\n\nconst getPublicUrl = require('../utils/get-public-url');\n\nconst {\n  GET_OPTIONS\n} = require('../utils/constants');\n\nconst get = async _ref => {\n  let {\n    apiKey,\n    apiSecret,\n    key,\n    bucket,\n    getOptions = [GET_OPTIONS.DATA]\n  } = _ref;\n  const fileData = {\n    [GET_OPTIONS.KEY]: key,\n    [GET_OPTIONS.BUCKET]: bucket\n  }; // validate getOptions\n\n  let invalidOption;\n  const validOptions = Object.keys(GET_OPTIONS).map(optionKey => GET_OPTIONS[optionKey]);\n  getOptions.forEach(option => {\n    if (!validOptions.includes(option)) {\n      invalidOption = option;\n    }\n  });\n\n  if (invalidOption) {\n    throw `Invalid option ${invalidOption}`;\n  }\n\n  if (getOptions.length === 0) {\n    throw 'No Options specified';\n  }\n\n  let s3;\n\n  try {\n    s3 = initS3(apiKey, apiSecret);\n  } catch (error) {\n    throw error;\n  }\n\n  if (!key) {\n    throw 'No file key was specified';\n  }\n\n  if (!fileData[GET_OPTIONS.BUCKET]) {\n    try {\n      fileData[GET_OPTIONS.BUCKET] = await getBucket(s3);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  if (getOptions.includes(GET_OPTIONS.PUBLIC_URL)) {\n    const publicUrl = getPublicUrl(fileData[GET_OPTIONS.BUCKET], fileData[GET_OPTIONS.KEY]);\n    fileData[GET_OPTIONS.PUBLIC_URL] = publicUrl;\n  }\n\n  if (getOptions.includes(GET_OPTIONS.HASH)) {\n    try {\n      fileData[GET_OPTIONS.HASH] = await getHashFromKey(fileData[GET_OPTIONS.BUCKET], fileData[GET_OPTIONS.KEY]);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  if (getOptions.includes(GET_OPTIONS.DATA)) {\n    try {\n      const params = {\n        Bucket: fileData[GET_OPTIONS.BUCKET],\n        Key: fileData[GET_OPTIONS.KEY]\n      };\n      const data = await getFile(s3, params);\n      fileData[GET_OPTIONS.DATA] = data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  const returnData = {};\n  getOptions.forEach(option => {\n    returnData[option] = fileData[option];\n  });\n  return returnData;\n};\n\nmodule.exports = get;","map":{"version":3,"names":["initS3","require","getBucket","getFile","getHashFromKey","getPublicUrl","GET_OPTIONS","get","apiKey","apiSecret","key","bucket","getOptions","DATA","fileData","KEY","BUCKET","invalidOption","validOptions","Object","keys","map","optionKey","forEach","option","includes","length","s3","error","PUBLIC_URL","publicUrl","HASH","params","Bucket","Key","data","returnData","module","exports"],"sources":["/Users/schidtery/Desktop/schidtco/schidtco/schidtco/node_modules/@fleekhq/fleek-storage-js/methods/get.js"],"sourcesContent":["const initS3 = require('../utils/init-s3');\nconst getBucket = require('../utils/get-bucket');\nconst getFile = require('../utils/get-file');\nconst getHashFromKey = require('../utils/get-hash-from-key');\nconst getPublicUrl = require('../utils/get-public-url');\nconst { GET_OPTIONS } = require('../utils/constants');\n\nconst get = async ({\n  apiKey,\n  apiSecret,\n  key,\n  bucket,\n  getOptions = [GET_OPTIONS.DATA],\n}) => {\n  const fileData = {\n    [GET_OPTIONS.KEY]: key,\n    [GET_OPTIONS.BUCKET]: bucket,\n  };\n\n  // validate getOptions\n  let invalidOption;\n  const validOptions = Object.keys(GET_OPTIONS).map(optionKey => GET_OPTIONS[optionKey])\n  getOptions.forEach(option => {\n    if (!validOptions.includes(option)){\n      invalidOption = option;\n    }\n  })\n\n  if (invalidOption) {\n    throw `Invalid option ${invalidOption}`;\n  }\n\n  if (getOptions.length === 0) {\n    throw 'No Options specified'\n  }\n\n  let s3;\n  try {\n    s3 = initS3(\n      apiKey,\n      apiSecret,\n    );\n  } catch(error) {\n    throw error;\n  }\n\n  if (!key) {\n    throw 'No file key was specified'\n  }\n  \n  if (!fileData[GET_OPTIONS.BUCKET]) {\n    try {\n      fileData[GET_OPTIONS.BUCKET] = await getBucket(s3);\n    } catch(error) {\n      throw error;\n    }\n  }\n  \n  if(getOptions.includes(GET_OPTIONS.PUBLIC_URL)) {\n     const publicUrl = getPublicUrl(\n      fileData[GET_OPTIONS.BUCKET], fileData[GET_OPTIONS.KEY]\n    );\n    fileData[GET_OPTIONS.PUBLIC_URL] = publicUrl;\n  }\n\n  if(getOptions.includes(GET_OPTIONS.HASH)) {\n    try {\n      fileData[GET_OPTIONS.HASH] = await getHashFromKey(fileData[GET_OPTIONS.BUCKET], fileData[GET_OPTIONS.KEY]);\n    } catch(error) {\n      throw error;\n    }\n  }\n\n  if (getOptions.includes(GET_OPTIONS.DATA)) {\n    try {\n      const params = {\n        Bucket: fileData[GET_OPTIONS.BUCKET],\n        Key: fileData[GET_OPTIONS.KEY],\n      };\n  \n      const data = await getFile(s3, params);\n      fileData[GET_OPTIONS.DATA] = data;\n    } catch(error) {\n      throw error;\n    }\n  }\n\n  const returnData = {};\n  getOptions.forEach(option => {\n    returnData[option] = fileData[option]\n  });\n\n  return returnData;\n};\n\nmodule.exports = get;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}