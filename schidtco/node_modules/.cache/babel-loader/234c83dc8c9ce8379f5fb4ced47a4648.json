{"ast":null,"code":"const axios = require('axios').default;\n\nconst {\n  ipfsGateway\n} = require('../config');\n\nconst {\n  GET_FILE_FROM_HASH_OPTIONS\n} = require('../utils/constants');\n\nconst getFileFromHash = async _ref => {\n  let {\n    hash,\n    getFileFromHashOptions = []\n  } = _ref;\n\n  if (!hash) {\n    throw 'No hash was given';\n  } // validate getOptions\n\n\n  let invalidOption;\n  const validOptions = Object.keys(GET_FILE_FROM_HASH_OPTIONS).map(optionKey => GET_FILE_FROM_HASH_OPTIONS[optionKey]);\n  getFileFromHashOptions.forEach(option => {\n    if (!validOptions.includes(option)) {\n      invalidOption = option;\n    }\n  });\n\n  if (invalidOption) {\n    throw `Invalid option ${invalidOption}`;\n  }\n\n  const params = {\n    method: 'get',\n    url: `${ipfsGateway}/${hash}`\n  };\n\n  if (getFileFromHashOptions.includes(GET_FILE_FROM_HASH_OPTIONS.BUFFER)) {\n    params.responseType = 'arraybuffer';\n  }\n\n  try {\n    const response = await axios(params);\n    return response.data;\n  } catch (e) {\n    throw e;\n  }\n};\n\nmodule.exports = getFileFromHash;","map":{"version":3,"names":["axios","require","default","ipfsGateway","GET_FILE_FROM_HASH_OPTIONS","getFileFromHash","hash","getFileFromHashOptions","invalidOption","validOptions","Object","keys","map","optionKey","forEach","option","includes","params","method","url","BUFFER","responseType","response","data","e","module","exports"],"sources":["/Users/schidtery/Desktop/schidtco/schidtco/schidtco/node_modules/@fleekhq/fleek-storage-js/methods/getFileFromHash.js"],"sourcesContent":["const axios = require('axios').default;\nconst { ipfsGateway } = require('../config');\nconst { GET_FILE_FROM_HASH_OPTIONS } = require('../utils/constants');\n\nconst getFileFromHash = async ({\n  hash,\n  getFileFromHashOptions = [],\n}) => {\n  if(!hash) {\n    throw 'No hash was given';\n  }\n\n  // validate getOptions\n  let invalidOption;\n  const validOptions = Object.keys(GET_FILE_FROM_HASH_OPTIONS).map(optionKey => GET_FILE_FROM_HASH_OPTIONS[optionKey])\n  getFileFromHashOptions.forEach(option => {\n    if (!validOptions.includes(option)){\n      invalidOption = option;\n    }\n  })\n\n  if (invalidOption) {\n    throw `Invalid option ${invalidOption}`;\n  }\n\n  const params = {\n    method: 'get',\n    url: `${ipfsGateway}/${hash}`,\n  };\n\n  if(getFileFromHashOptions.includes(GET_FILE_FROM_HASH_OPTIONS.BUFFER)) {\n    params.responseType = 'arraybuffer'\n }\n\n  try {\n    const response = await axios(params);\n\n    return response.data;\n  } catch(e) {\n    throw e;\n  }\n};\n\nmodule.exports = getFileFromHash;\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiBC,OAA/B;;AACA,MAAM;EAAEC;AAAF,IAAkBF,OAAO,CAAC,WAAD,CAA/B;;AACA,MAAM;EAAEG;AAAF,IAAiCH,OAAO,CAAC,oBAAD,CAA9C;;AAEA,MAAMI,eAAe,GAAG,cAGlB;EAAA,IAHyB;IAC7BC,IAD6B;IAE7BC,sBAAsB,GAAG;EAFI,CAGzB;;EACJ,IAAG,CAACD,IAAJ,EAAU;IACR,MAAM,mBAAN;EACD,CAHG,CAKJ;;;EACA,IAAIE,aAAJ;EACA,MAAMC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYP,0BAAZ,EAAwCQ,GAAxC,CAA4CC,SAAS,IAAIT,0BAA0B,CAACS,SAAD,CAAnF,CAArB;EACAN,sBAAsB,CAACO,OAAvB,CAA+BC,MAAM,IAAI;IACvC,IAAI,CAACN,YAAY,CAACO,QAAb,CAAsBD,MAAtB,CAAL,EAAmC;MACjCP,aAAa,GAAGO,MAAhB;IACD;EACF,CAJD;;EAMA,IAAIP,aAAJ,EAAmB;IACjB,MAAO,kBAAiBA,aAAc,EAAtC;EACD;;EAED,MAAMS,MAAM,GAAG;IACbC,MAAM,EAAE,KADK;IAEbC,GAAG,EAAG,GAAEhB,WAAY,IAAGG,IAAK;EAFf,CAAf;;EAKA,IAAGC,sBAAsB,CAACS,QAAvB,CAAgCZ,0BAA0B,CAACgB,MAA3D,CAAH,EAAuE;IACrEH,MAAM,CAACI,YAAP,GAAsB,aAAtB;EACF;;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMtB,KAAK,CAACiB,MAAD,CAA5B;IAEA,OAAOK,QAAQ,CAACC,IAAhB;EACD,CAJD,CAIE,OAAMC,CAAN,EAAS;IACT,MAAMA,CAAN;EACD;AACF,CArCD;;AAuCAC,MAAM,CAACC,OAAP,GAAiBrB,eAAjB"},"metadata":{},"sourceType":"script"}