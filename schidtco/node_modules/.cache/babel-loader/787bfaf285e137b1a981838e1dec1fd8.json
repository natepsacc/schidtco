{"ast":null,"code":"const initS3 = require('../utils/init-s3');\n\nconst getBucket = require('../utils/get-bucket');\n\nconst streamUploadFile = require('../utils/stream-upload');\n\nconst getPublicUrl = require('../utils/get-public-url');\n\nconst streamUpload = async _ref => {\n  let {\n    apiKey,\n    apiSecret,\n    stream,\n    key,\n    bucket\n  } = _ref;\n\n  try {\n    const s3 = initS3(apiKey, apiSecret);\n\n    if (!stream) {\n      throw 'No file to upload';\n    }\n\n    if (!key) {\n      throw 'No file key was specified';\n    }\n\n    let bucketName = bucket;\n\n    if (!bucketName) {\n      bucketName = await getBucket(s3);\n    }\n\n    const params = {\n      bucket: bucketName,\n      objectName: key,\n      stream\n    };\n    const result = await streamUploadFile(s3, params);\n    const returnData = {\n      key,\n      bucket: bucketName,\n      publicUrl: getPublicUrl(bucketName, key),\n      hash: result.hash,\n      hashV0: result.hashV0\n    };\n    return returnData;\n  } catch (error) {\n    throw error;\n  }\n};\n\nmodule.exports = streamUpload;","map":{"version":3,"names":["initS3","require","getBucket","streamUploadFile","getPublicUrl","streamUpload","apiKey","apiSecret","stream","key","bucket","s3","bucketName","params","objectName","result","returnData","publicUrl","hash","hashV0","error","module","exports"],"sources":["/Users/schidtery/Desktop/schidtco/schidtco/schidtco/node_modules/@fleekhq/fleek-storage-js/methods/streamUpload.js"],"sourcesContent":["const initS3 = require('../utils/init-s3');\nconst getBucket = require('../utils/get-bucket');\nconst streamUploadFile = require('../utils/stream-upload');\nconst getPublicUrl = require('../utils/get-public-url');\n\nconst streamUpload = async ({\n  apiKey,\n  apiSecret,\n  stream,\n  key,\n  bucket,\n}) => {\n  try {\n    const s3 = initS3(\n      apiKey,\n      apiSecret,\n    );\n\n    if (!stream) {\n      throw 'No file to upload';\n    }\n\n    if (!key) {\n      throw 'No file key was specified'\n    }\n\n    let bucketName = bucket;\n    \n    if (!bucketName) {\n      bucketName = await getBucket(s3);\n    }\n\n    const params = {\n      bucket: bucketName,\n      objectName: key,\n      stream,\n    };\n\n    const result = await streamUploadFile(s3, params);\n\n    const returnData = {\n      key,\n      bucket: bucketName,\n      publicUrl: getPublicUrl(bucketName, key),\n      hash: result.hash,\n      hashV0: result.hashV0,\n    };\n\n    return returnData;\n  } catch(error) {\n    throw error;\n  }\n};\n\nmodule.exports = streamUpload;\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAAtB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAzB;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,wBAAD,CAAhC;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,yBAAD,CAA5B;;AAEA,MAAMI,YAAY,GAAG,cAMf;EAAA,IANsB;IAC1BC,MAD0B;IAE1BC,SAF0B;IAG1BC,MAH0B;IAI1BC,GAJ0B;IAK1BC;EAL0B,CAMtB;;EACJ,IAAI;IACF,MAAMC,EAAE,GAAGX,MAAM,CACfM,MADe,EAEfC,SAFe,CAAjB;;IAKA,IAAI,CAACC,MAAL,EAAa;MACX,MAAM,mBAAN;IACD;;IAED,IAAI,CAACC,GAAL,EAAU;MACR,MAAM,2BAAN;IACD;;IAED,IAAIG,UAAU,GAAGF,MAAjB;;IAEA,IAAI,CAACE,UAAL,EAAiB;MACfA,UAAU,GAAG,MAAMV,SAAS,CAACS,EAAD,CAA5B;IACD;;IAED,MAAME,MAAM,GAAG;MACbH,MAAM,EAAEE,UADK;MAEbE,UAAU,EAAEL,GAFC;MAGbD;IAHa,CAAf;IAMA,MAAMO,MAAM,GAAG,MAAMZ,gBAAgB,CAACQ,EAAD,EAAKE,MAAL,CAArC;IAEA,MAAMG,UAAU,GAAG;MACjBP,GADiB;MAEjBC,MAAM,EAAEE,UAFS;MAGjBK,SAAS,EAAEb,YAAY,CAACQ,UAAD,EAAaH,GAAb,CAHN;MAIjBS,IAAI,EAAEH,MAAM,CAACG,IAJI;MAKjBC,MAAM,EAAEJ,MAAM,CAACI;IALE,CAAnB;IAQA,OAAOH,UAAP;EACD,CArCD,CAqCE,OAAMI,KAAN,EAAa;IACb,MAAMA,KAAN;EACD;AACF,CA/CD;;AAiDAC,MAAM,CAACC,OAAP,GAAiBjB,YAAjB"},"metadata":{},"sourceType":"script"}