{"ast":null,"code":"const {\n  CID\n} = require('multiformats');\n\nconst uploadFile = function (s3, params) {\n  let cb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};\n  return new Promise((resolve, reject) => {\n    const request = s3.putObject(params);\n    request.on('complete', response => {\n      try {\n        const {\n          data: {\n            ETag\n          }\n        } = response;\n        const hash = ETag.replace(/^\"|\"$/g, '');\n        const cidObj = CID.parse(hash);\n        let cidv0;\n        const cidv1 = cidObj.toV1().toString();\n\n        try {\n          cidv0 = cidObj.toV0().toString();\n        } catch (e) {\n          // fallback when cbor is used\n          cidv0 = cidv1;\n        }\n\n        resolve({\n          hash: cidv1,\n          hashV0: cidv0\n        });\n      } catch (e) {\n        reject(e);\n      }\n    });\n    request.on('error', error => {\n      reject(error);\n    });\n    request.on('httpUploadProgress', event => {\n      cb(event);\n    });\n    request.send();\n  });\n};\n\nmodule.exports = uploadFile;","map":{"version":3,"names":["CID","require","uploadFile","s3","params","cb","Promise","resolve","reject","request","putObject","on","response","data","ETag","hash","replace","cidObj","parse","cidv0","cidv1","toV1","toString","toV0","e","hashV0","error","event","send","module","exports"],"sources":["/Users/schidtery/Desktop/schidtco/schidtco/schidtco/node_modules/@fleekhq/fleek-storage-js/utils/upload-file.js"],"sourcesContent":["const { CID } = require('multiformats');\n\n\nconst uploadFile = (s3, params, cb = () => {}) => (new Promise((resolve, reject) => {\n  const request = s3.putObject(params);\n\n  request.on('complete', (response) => {\n    try {\n      const { data: { ETag } } = response;\n\n      const hash = ETag.replace(/^\"|\"$/g, '');\n\n      const cidObj = CID.parse(hash);\n\n      let cidv0;\n\n      const cidv1 = cidObj.toV1().toString();\n\n      try {\n        cidv0 = cidObj.toV0().toString();\n      } catch (e) {\n        // fallback when cbor is used\n        cidv0 = cidv1;\n      }\n\n      resolve ({ hash: cidv1, hashV0: cidv0 });\n    } catch (e) {\n      reject(e);\n    }\n  });\n\n  request.on('error', (error) => {\n    reject(error);\n  });\n\n  request.on('httpUploadProgress', (event) => {\n    cb(event);\n  });\n\n  request.send();\n}));\n\nmodule.exports = uploadFile;\n"],"mappings":"AAAA,MAAM;EAAEA;AAAF,IAAUC,OAAO,CAAC,cAAD,CAAvB;;AAGA,MAAMC,UAAU,GAAG,UAACC,EAAD,EAAKC,MAAL;EAAA,IAAaC,EAAb,uEAAkB,MAAM,CAAE,CAA1B;EAAA,OAAgC,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IAClF,MAAMC,OAAO,GAAGN,EAAE,CAACO,SAAH,CAAaN,MAAb,CAAhB;IAEAK,OAAO,CAACE,EAAR,CAAW,UAAX,EAAwBC,QAAD,IAAc;MACnC,IAAI;QACF,MAAM;UAAEC,IAAI,EAAE;YAAEC;UAAF;QAAR,IAAqBF,QAA3B;QAEA,MAAMG,IAAI,GAAGD,IAAI,CAACE,OAAL,CAAa,QAAb,EAAuB,EAAvB,CAAb;QAEA,MAAMC,MAAM,GAAGjB,GAAG,CAACkB,KAAJ,CAAUH,IAAV,CAAf;QAEA,IAAII,KAAJ;QAEA,MAAMC,KAAK,GAAGH,MAAM,CAACI,IAAP,GAAcC,QAAd,EAAd;;QAEA,IAAI;UACFH,KAAK,GAAGF,MAAM,CAACM,IAAP,GAAcD,QAAd,EAAR;QACD,CAFD,CAEE,OAAOE,CAAP,EAAU;UACV;UACAL,KAAK,GAAGC,KAAR;QACD;;QAEDb,OAAO,CAAE;UAAEQ,IAAI,EAAEK,KAAR;UAAeK,MAAM,EAAEN;QAAvB,CAAF,CAAP;MACD,CAnBD,CAmBE,OAAOK,CAAP,EAAU;QACVhB,MAAM,CAACgB,CAAD,CAAN;MACD;IACF,CAvBD;IAyBAf,OAAO,CAACE,EAAR,CAAW,OAAX,EAAqBe,KAAD,IAAW;MAC7BlB,MAAM,CAACkB,KAAD,CAAN;IACD,CAFD;IAIAjB,OAAO,CAACE,EAAR,CAAW,oBAAX,EAAkCgB,KAAD,IAAW;MAC1CtB,EAAE,CAACsB,KAAD,CAAF;IACD,CAFD;IAIAlB,OAAO,CAACmB,IAAR;EACD,CArCkD,CAAhC;AAAA,CAAnB;;AAuCAC,MAAM,CAACC,OAAP,GAAiB5B,UAAjB"},"metadata":{},"sourceType":"script"}