{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/schidtery/Desktop/schidtco/schidtco/schidtco/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/schidtery/Desktop/schidtco/schidtco/schidtco/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar initS3 = require('../utils/init-s3');\n\nvar getBucket = require('../utils/get-bucket');\n\nvar streamUploadFile = require('../utils/stream-upload');\n\nvar getPublicUrl = require('../utils/get-public-url');\n\nvar streamUpload = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var apiKey, apiSecret, stream, key, bucket, s3, bucketName, params, result, returnData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            apiKey = _ref.apiKey, apiSecret = _ref.apiSecret, stream = _ref.stream, key = _ref.key, bucket = _ref.bucket;\n            _context.prev = 1;\n            s3 = initS3(apiKey, apiSecret);\n\n            if (stream) {\n              _context.next = 5;\n              break;\n            }\n\n            throw 'No file to upload';\n\n          case 5:\n            if (key) {\n              _context.next = 7;\n              break;\n            }\n\n            throw 'No file key was specified';\n\n          case 7:\n            bucketName = bucket;\n\n            if (bucketName) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 11;\n            return getBucket(s3);\n\n          case 11:\n            bucketName = _context.sent;\n\n          case 12:\n            params = {\n              bucket: bucketName,\n              objectName: key,\n              stream: stream\n            };\n            _context.next = 15;\n            return streamUploadFile(s3, params);\n\n          case 15:\n            result = _context.sent;\n            returnData = {\n              key: key,\n              bucket: bucketName,\n              publicUrl: getPublicUrl(bucketName, key),\n              hash: result.hash,\n              hashV0: result.hashV0\n            };\n            return _context.abrupt(\"return\", returnData);\n\n          case 20:\n            _context.prev = 20;\n            _context.t0 = _context[\"catch\"](1);\n            throw _context.t0;\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 20]]);\n  }));\n\n  return function streamUpload(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nmodule.exports = streamUpload;","map":null,"metadata":{},"sourceType":"script"}