{"ast":null,"code":"const initS3 = require('../utils/init-s3');\n\nconst getBucket = require('../utils/get-bucket');\n\nconst uploadFile = require('../utils/upload-file');\n\nconst getPublicUrl = require('../utils/get-public-url');\n\nconst upload = async _ref => {\n  let {\n    apiKey,\n    apiSecret,\n    data,\n    key,\n    bucket,\n    httpUploadProgressCallback\n  } = _ref;\n\n  try {\n    const s3 = initS3(apiKey, apiSecret);\n\n    if (!data) {\n      throw 'No file to upload';\n    }\n\n    if (!key) {\n      throw 'No file key was specified';\n    }\n\n    let bucketName = bucket;\n\n    if (!bucketName) {\n      bucketName = await getBucket(s3);\n    }\n\n    const params = {\n      Bucket: bucketName,\n      Key: key,\n      Body: data,\n      ACL: 'public-read'\n    };\n    const result = await uploadFile(s3, params, httpUploadProgressCallback);\n    const returnData = {\n      hash: result.hash,\n      hashV0: result.hashV0,\n      key,\n      bucket: bucketName,\n      publicUrl: getPublicUrl(bucketName, key)\n    };\n    return returnData;\n  } catch (error) {\n    throw error;\n  }\n};\n\nmodule.exports = upload;","map":{"version":3,"names":["initS3","require","getBucket","uploadFile","getPublicUrl","upload","apiKey","apiSecret","data","key","bucket","httpUploadProgressCallback","s3","bucketName","params","Bucket","Key","Body","ACL","result","returnData","hash","hashV0","publicUrl","error","module","exports"],"sources":["/Users/schidtery/Desktop/schidtco/schidtco/schidtco/node_modules/@fleekhq/fleek-storage-js/methods/upload.js"],"sourcesContent":["const initS3 = require('../utils/init-s3');\nconst getBucket = require('../utils/get-bucket');\nconst uploadFile = require('../utils/upload-file');\nconst getPublicUrl = require('../utils/get-public-url');\n\nconst upload = async ({\n  apiKey,\n  apiSecret,\n  data,\n  key,\n  bucket,\n  httpUploadProgressCallback,\n}) => {\n  try {\n    const s3 = initS3(\n      apiKey,\n      apiSecret,\n    );\n\n    if (!data) {\n      throw 'No file to upload';\n    }\n\n    if (!key) {\n      throw 'No file key was specified'\n    }\n\n    let bucketName = bucket;\n    \n    if (!bucketName) {\n      bucketName = await getBucket(s3);\n    }\n\n    const params = {\n      Bucket: bucketName,\n      Key: key,\n      Body: data,\n      ACL: 'public-read',\n    };\n\n    const result = await uploadFile(s3, params, httpUploadProgressCallback);\n\n    const returnData = {\n      hash: result.hash,\n      hashV0: result.hashV0,\n      key,\n      bucket: bucketName,\n      publicUrl: getPublicUrl(bucketName, key),\n    };\n\n    return returnData;\n  } catch(error) {\n    throw error;\n  }\n};\n\nmodule.exports = upload;\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAAtB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAzB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,sBAAD,CAA1B;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,yBAAD,CAA5B;;AAEA,MAAMI,MAAM,GAAG,cAOT;EAAA,IAPgB;IACpBC,MADoB;IAEpBC,SAFoB;IAGpBC,IAHoB;IAIpBC,GAJoB;IAKpBC,MALoB;IAMpBC;EANoB,CAOhB;;EACJ,IAAI;IACF,MAAMC,EAAE,GAAGZ,MAAM,CACfM,MADe,EAEfC,SAFe,CAAjB;;IAKA,IAAI,CAACC,IAAL,EAAW;MACT,MAAM,mBAAN;IACD;;IAED,IAAI,CAACC,GAAL,EAAU;MACR,MAAM,2BAAN;IACD;;IAED,IAAII,UAAU,GAAGH,MAAjB;;IAEA,IAAI,CAACG,UAAL,EAAiB;MACfA,UAAU,GAAG,MAAMX,SAAS,CAACU,EAAD,CAA5B;IACD;;IAED,MAAME,MAAM,GAAG;MACbC,MAAM,EAAEF,UADK;MAEbG,GAAG,EAAEP,GAFQ;MAGbQ,IAAI,EAAET,IAHO;MAIbU,GAAG,EAAE;IAJQ,CAAf;IAOA,MAAMC,MAAM,GAAG,MAAMhB,UAAU,CAACS,EAAD,EAAKE,MAAL,EAAaH,0BAAb,CAA/B;IAEA,MAAMS,UAAU,GAAG;MACjBC,IAAI,EAAEF,MAAM,CAACE,IADI;MAEjBC,MAAM,EAAEH,MAAM,CAACG,MAFE;MAGjBb,GAHiB;MAIjBC,MAAM,EAAEG,UAJS;MAKjBU,SAAS,EAAEnB,YAAY,CAACS,UAAD,EAAaJ,GAAb;IALN,CAAnB;IAQA,OAAOW,UAAP;EACD,CAtCD,CAsCE,OAAMI,KAAN,EAAa;IACb,MAAMA,KAAN;EACD;AACF,CAjDD;;AAmDAC,MAAM,CAACC,OAAP,GAAiBrB,MAAjB"},"metadata":{},"sourceType":"script"}