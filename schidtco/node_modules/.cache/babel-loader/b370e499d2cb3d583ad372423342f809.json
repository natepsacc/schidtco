{"ast":null,"code":"const initS3 = require('../utils/init-s3');\n\nconst getBucket = require('../utils/get-bucket');\n\nconst getFileList = require('../utils/get-file-list');\n\nconst getHashFromKey = require('../utils/get-hash-from-key');\n\nconst getPublicUrl = require('../utils/get-public-url');\n\nconst {\n  GET_OPTIONS\n} = require('../utils/constants');\n\nconst listFiles = async _ref => {\n  let {\n    apiKey,\n    apiSecret,\n    bucket = null,\n    prefix = '',\n    getOptions = [GET_OPTIONS.KEY, GET_OPTIONS.BUCKET, GET_OPTIONS.PUBLIC_URL]\n  } = _ref;\n  const possibleGetOptions = [GET_OPTIONS.KEY, GET_OPTIONS.BUCKET, GET_OPTIONS.HASH, GET_OPTIONS.PUBLIC_URL];\n\n  if (getOptions.length === 0) {\n    throw 'No getOptions have been specified';\n  }\n\n  let wrongGetOption = getOptions.forEach(option => {\n    if (!possibleGetOptions.includes(option)) {\n      wrongGetOption = option;\n    }\n  });\n\n  if (wrongGetOption) {\n    throw 'Unacceptable getOptions parameter';\n  }\n\n  try {\n    const s3 = initS3(apiKey, apiSecret);\n    let bucketName = bucket;\n\n    if (!bucketName) {\n      bucketName = await getBucket(s3);\n    }\n\n    const files = await getFileList(s3, bucketName, prefix);\n    const promises = files.map(async (key, index) => {\n      if (getOptions.includes(GET_OPTIONS.HASH)) {\n        hash = await getHashFromKey(bucketName, key);\n      }\n\n      return { ...(getOptions.includes(GET_OPTIONS.KEY) && {\n          key\n        }),\n        ...(getOptions.includes(GET_OPTIONS.BUCKET) && {\n          bucket: bucketName\n        }),\n        ...(getOptions.includes(GET_OPTIONS.HASH) && {\n          hash\n        }),\n        ...(getOptions.includes(GET_OPTIONS.PUBLIC_URL) && {\n          publicUrl: getPublicUrl(bucketName, key)\n        })\n      };\n    });\n    return Promise.all(promises);\n  } catch (e) {\n    throw e;\n  }\n};\n\nmodule.exports = listFiles;","map":{"version":3,"names":["initS3","require","getBucket","getFileList","getHashFromKey","getPublicUrl","GET_OPTIONS","listFiles","apiKey","apiSecret","bucket","prefix","getOptions","KEY","BUCKET","PUBLIC_URL","possibleGetOptions","HASH","length","wrongGetOption","forEach","option","includes","s3","bucketName","files","promises","map","key","index","hash","publicUrl","Promise","all","e","module","exports"],"sources":["/Users/schidtery/Desktop/schidtco/schidtco/schidtco/node_modules/@fleekhq/fleek-storage-js/methods/listFiles.js"],"sourcesContent":["const initS3 = require('../utils/init-s3');\nconst getBucket = require('../utils/get-bucket');\nconst getFileList = require('../utils/get-file-list');\nconst getHashFromKey = require('../utils/get-hash-from-key');\nconst getPublicUrl = require('../utils/get-public-url');\nconst { GET_OPTIONS } = require('../utils/constants');\n\nconst listFiles = async ({\n  apiKey,\n  apiSecret,\n  bucket = null,\n  prefix = '',\n  getOptions = [GET_OPTIONS.KEY, GET_OPTIONS.BUCKET, GET_OPTIONS.PUBLIC_URL],\n}) => {\n  const possibleGetOptions = [\n    GET_OPTIONS.KEY,\n    GET_OPTIONS.BUCKET,\n    GET_OPTIONS.HASH,\n    GET_OPTIONS.PUBLIC_URL,\n  ];\n\n  if (getOptions.length === 0) {\n    throw 'No getOptions have been specified';\n  }\n\n  let wrongGetOption = getOptions.forEach(option => {\n    if (!possibleGetOptions.includes(option)) {\n      wrongGetOption = option;\n    }\n  })\n\n  if(wrongGetOption) {\n    throw 'Unacceptable getOptions parameter';\n  }\n\n  try {\n    const s3 = initS3(\n      apiKey,\n      apiSecret,\n    );\n\n    let bucketName = bucket;\n    if (!bucketName) {\n      bucketName = await getBucket(s3);\n    }\n\n    const files = await getFileList(s3, bucketName, prefix);\n\n    const promises = files.map(async (key, index) => {\n      if (getOptions.includes(GET_OPTIONS.HASH)) {\n        hash = await getHashFromKey(bucketName, key);\n      }\n\n      return ({\n        ...(getOptions.includes(GET_OPTIONS.KEY) && { key }),\n        ...(getOptions.includes(GET_OPTIONS.BUCKET) && { bucket: bucketName }),\n        ...(getOptions.includes(GET_OPTIONS.HASH) && { hash }),\n        ...(getOptions.includes(GET_OPTIONS.PUBLIC_URL) && { publicUrl: getPublicUrl(bucketName, key) }),\n      });\n    });\n\n    return Promise.all(promises);\n  } catch(e) {\n    throw e;\n  }\n};\n\nmodule.exports = listFiles;\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAAtB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAzB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,wBAAD,CAA3B;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,4BAAD,CAA9B;;AACA,MAAMI,YAAY,GAAGJ,OAAO,CAAC,yBAAD,CAA5B;;AACA,MAAM;EAAEK;AAAF,IAAkBL,OAAO,CAAC,oBAAD,CAA/B;;AAEA,MAAMM,SAAS,GAAG,cAMZ;EAAA,IANmB;IACvBC,MADuB;IAEvBC,SAFuB;IAGvBC,MAAM,GAAG,IAHc;IAIvBC,MAAM,GAAG,EAJc;IAKvBC,UAAU,GAAG,CAACN,WAAW,CAACO,GAAb,EAAkBP,WAAW,CAACQ,MAA9B,EAAsCR,WAAW,CAACS,UAAlD;EALU,CAMnB;EACJ,MAAMC,kBAAkB,GAAG,CACzBV,WAAW,CAACO,GADa,EAEzBP,WAAW,CAACQ,MAFa,EAGzBR,WAAW,CAACW,IAHa,EAIzBX,WAAW,CAACS,UAJa,CAA3B;;EAOA,IAAIH,UAAU,CAACM,MAAX,KAAsB,CAA1B,EAA6B;IAC3B,MAAM,mCAAN;EACD;;EAED,IAAIC,cAAc,GAAGP,UAAU,CAACQ,OAAX,CAAmBC,MAAM,IAAI;IAChD,IAAI,CAACL,kBAAkB,CAACM,QAAnB,CAA4BD,MAA5B,CAAL,EAA0C;MACxCF,cAAc,GAAGE,MAAjB;IACD;EACF,CAJoB,CAArB;;EAMA,IAAGF,cAAH,EAAmB;IACjB,MAAM,mCAAN;EACD;;EAED,IAAI;IACF,MAAMI,EAAE,GAAGvB,MAAM,CACfQ,MADe,EAEfC,SAFe,CAAjB;IAKA,IAAIe,UAAU,GAAGd,MAAjB;;IACA,IAAI,CAACc,UAAL,EAAiB;MACfA,UAAU,GAAG,MAAMtB,SAAS,CAACqB,EAAD,CAA5B;IACD;;IAED,MAAME,KAAK,GAAG,MAAMtB,WAAW,CAACoB,EAAD,EAAKC,UAAL,EAAiBb,MAAjB,CAA/B;IAEA,MAAMe,QAAQ,GAAGD,KAAK,CAACE,GAAN,CAAU,OAAOC,GAAP,EAAYC,KAAZ,KAAsB;MAC/C,IAAIjB,UAAU,CAACU,QAAX,CAAoBhB,WAAW,CAACW,IAAhC,CAAJ,EAA2C;QACzCa,IAAI,GAAG,MAAM1B,cAAc,CAACoB,UAAD,EAAaI,GAAb,CAA3B;MACD;;MAED,OAAQ,EACN,IAAIhB,UAAU,CAACU,QAAX,CAAoBhB,WAAW,CAACO,GAAhC,KAAwC;UAAEe;QAAF,CAA5C,CADM;QAEN,IAAIhB,UAAU,CAACU,QAAX,CAAoBhB,WAAW,CAACQ,MAAhC,KAA2C;UAAEJ,MAAM,EAAEc;QAAV,CAA/C,CAFM;QAGN,IAAIZ,UAAU,CAACU,QAAX,CAAoBhB,WAAW,CAACW,IAAhC,KAAyC;UAAEa;QAAF,CAA7C,CAHM;QAIN,IAAIlB,UAAU,CAACU,QAAX,CAAoBhB,WAAW,CAACS,UAAhC,KAA+C;UAAEgB,SAAS,EAAE1B,YAAY,CAACmB,UAAD,EAAaI,GAAb;QAAzB,CAAnD;MAJM,CAAR;IAMD,CAXgB,CAAjB;IAaA,OAAOI,OAAO,CAACC,GAAR,CAAYP,QAAZ,CAAP;EACD,CA3BD,CA2BE,OAAMQ,CAAN,EAAS;IACT,MAAMA,CAAN;EACD;AACF,CA1DD;;AA4DAC,MAAM,CAACC,OAAP,GAAiB7B,SAAjB"},"metadata":{},"sourceType":"script"}