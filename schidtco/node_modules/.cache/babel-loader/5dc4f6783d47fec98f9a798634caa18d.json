{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/schidtery/Desktop/schidtco/schidtco/schidtco/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/schidtery/Desktop/schidtco/schidtco/schidtco/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"/Users/schidtery/Desktop/schidtco/schidtco/schidtco/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar initS3 = require('../utils/init-s3');\n\nvar getBucket = require('../utils/get-bucket');\n\nvar getFileList = require('../utils/get-file-list');\n\nvar getHashFromKey = require('../utils/get-hash-from-key');\n\nvar getPublicUrl = require('../utils/get-public-url');\n\nvar _require = require('../utils/constants'),\n    GET_OPTIONS = _require.GET_OPTIONS;\n\nvar listFiles = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref) {\n    var apiKey, apiSecret, _ref$bucket, bucket, _ref$prefix, prefix, _ref$getOptions, getOptions, possibleGetOptions, wrongGetOption, s3, bucketName, files, promises;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            apiKey = _ref.apiKey, apiSecret = _ref.apiSecret, _ref$bucket = _ref.bucket, bucket = _ref$bucket === void 0 ? null : _ref$bucket, _ref$prefix = _ref.prefix, prefix = _ref$prefix === void 0 ? '' : _ref$prefix, _ref$getOptions = _ref.getOptions, getOptions = _ref$getOptions === void 0 ? [GET_OPTIONS.KEY, GET_OPTIONS.BUCKET, GET_OPTIONS.PUBLIC_URL] : _ref$getOptions;\n            possibleGetOptions = [GET_OPTIONS.KEY, GET_OPTIONS.BUCKET, GET_OPTIONS.HASH, GET_OPTIONS.PUBLIC_URL];\n\n            if (!(getOptions.length === 0)) {\n              _context2.next = 4;\n              break;\n            }\n\n            throw 'No getOptions have been specified';\n\n          case 4:\n            wrongGetOption = getOptions.forEach(function (option) {\n              if (!possibleGetOptions.includes(option)) {\n                wrongGetOption = option;\n              }\n            });\n\n            if (!wrongGetOption) {\n              _context2.next = 7;\n              break;\n            }\n\n            throw 'Unacceptable getOptions parameter';\n\n          case 7:\n            _context2.prev = 7;\n            s3 = initS3(apiKey, apiSecret);\n            bucketName = bucket;\n\n            if (bucketName) {\n              _context2.next = 14;\n              break;\n            }\n\n            _context2.next = 13;\n            return getBucket(s3);\n\n          case 13:\n            bucketName = _context2.sent;\n\n          case 14:\n            _context2.next = 16;\n            return getFileList(s3, bucketName, prefix);\n\n          case 16:\n            files = _context2.sent;\n            promises = files.map( /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, index) {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!getOptions.includes(GET_OPTIONS.HASH)) {\n                          _context.next = 4;\n                          break;\n                        }\n\n                        _context.next = 3;\n                        return getHashFromKey(bucketName, key);\n\n                      case 3:\n                        hash = _context.sent;\n\n                      case 4:\n                        return _context.abrupt(\"return\", _objectSpread({}, getOptions.includes(GET_OPTIONS.KEY) && {\n                          key: key\n                        }, getOptions.includes(GET_OPTIONS.BUCKET) && {\n                          bucket: bucketName\n                        }, getOptions.includes(GET_OPTIONS.HASH) && {\n                          hash: hash\n                        }, getOptions.includes(GET_OPTIONS.PUBLIC_URL) && {\n                          publicUrl: getPublicUrl(bucketName, key)\n                        }));\n\n                      case 5:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x2, _x3) {\n                return _ref3.apply(this, arguments);\n              };\n            }());\n            return _context2.abrupt(\"return\", Promise.all(promises));\n\n          case 21:\n            _context2.prev = 21;\n            _context2.t0 = _context2[\"catch\"](7);\n            throw _context2.t0;\n\n          case 24:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[7, 21]]);\n  }));\n\n  return function listFiles(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nmodule.exports = listFiles;","map":null,"metadata":{},"sourceType":"script"}