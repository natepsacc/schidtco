{"ast":null,"code":"const {\n  EventEmitter\n} = require('events');\n\nconst aws = require('aws-sdk');\n\nclass Uploader extends EventEmitter {\n  // Constructor\n  constructor(_ref, cb) {\n    let {\n      accessKey,\n      secretKey,\n      sessionToken,\n      region,\n      stream,\n      objectName,\n      objectParams,\n      bucket,\n      partSize,\n      service,\n      debug\n    } = _ref;\n    super();\n    this.cb = cb;\n    aws.config.update({\n      accessKeyId: accessKey,\n      secretAccessKey: secretKey,\n      sessionToken,\n      region: region || undefined\n    });\n    const params = {\n      Bucket: bucket,\n      Key: objectName,\n      Body: stream\n    };\n\n    for (const k in objectParams || {}) {\n      if (!params[k]) {\n        params[k] = objectParams[k];\n      }\n    }\n\n    this.objectName = objectName;\n    this.objectParams = params;\n    this.timeout = 300000;\n    this.debug = debug || false;\n\n    if (!this.objectParams.Bucket) {\n      throw new Error('Bucket must be given');\n    }\n\n    this.upload = new aws.S3.ManagedUpload({\n      partSize: partSize || 10 * 1024 * 1024,\n      queueSize: 4,\n      service,\n      params\n    }); // Progress event\n\n    this.upload.on('httpUploadProgress', progress => {\n      if (this.debug) {\n        console.log(`${progress.loaded} / ${progress.total}`);\n      }\n    });\n  } // Send stream\n\n\n  send(callback) {\n    this.upload.send((err, data) => {\n      if (err) {\n        console.log(err, data);\n      }\n\n      callback(err, data);\n    });\n  }\n\n}\n\nmodule.exports = {\n  Uploader\n};","map":{"version":3,"names":["EventEmitter","require","aws","Uploader","constructor","cb","accessKey","secretKey","sessionToken","region","stream","objectName","objectParams","bucket","partSize","service","debug","config","update","accessKeyId","secretAccessKey","undefined","params","Bucket","Key","Body","k","timeout","Error","upload","S3","ManagedUpload","queueSize","on","progress","console","log","loaded","total","send","callback","err","data","module","exports"],"sources":["/Users/schidtery/Desktop/schidtco/schidtco/schidtco/node_modules/s3-streaming-upload/src/index.js"],"sourcesContent":["const { EventEmitter } = require('events');\n\nconst aws = require('aws-sdk');\n\nclass Uploader extends EventEmitter {\n  // Constructor\n  constructor({\n    accessKey,\n    secretKey,\n    sessionToken,\n    region,\n    stream,\n    objectName,\n    objectParams,\n    bucket,\n    partSize,\n    service,\n    debug,\n  }, cb) {\n    super();\n    this.cb = cb;\n    aws.config.update({\n      accessKeyId: accessKey,\n      secretAccessKey: secretKey,\n      sessionToken,\n      region: region || undefined,\n    });\n\n    const params = {\n      Bucket: bucket,\n      Key: objectName,\n      Body: stream,\n    };\n\n    for (const k in objectParams || {}) {\n      if (!params[k]) {\n        params[k] = objectParams[k];\n      }\n    }\n\n    this.objectName = objectName;\n    this.objectParams = params;\n    this.timeout = 300000;\n    this.debug = debug || false;\n\n    if (!this.objectParams.Bucket) {\n      throw new Error('Bucket must be given');\n    }\n\n    this.upload = new aws.S3.ManagedUpload({\n      partSize: partSize || 10 * 1024 * 1024,\n      queueSize: 4,\n      service,\n      params,\n    });\n    // Progress event\n    this.upload.on('httpUploadProgress', (progress) => {\n      if (this.debug) {\n        console.log(`${progress.loaded} / ${progress.total}`);\n      }\n    });\n  }\n\n  // Send stream\n  send(callback) {\n    this.upload.send((err, data) => {\n      if (err) {\n        console.log(err, data);\n      }\n      callback(err, data);\n    });\n  }\n}\n\nmodule.exports = { Uploader };\n"],"mappings":"AAAA,MAAM;EAAEA;AAAF,IAAmBC,OAAO,CAAC,QAAD,CAAhC;;AAEA,MAAMC,GAAG,GAAGD,OAAO,CAAC,SAAD,CAAnB;;AAEA,MAAME,QAAN,SAAuBH,YAAvB,CAAoC;EAClC;EACAI,WAAW,OAYRC,EAZQ,EAYJ;IAAA,IAZK;MACVC,SADU;MAEVC,SAFU;MAGVC,YAHU;MAIVC,MAJU;MAKVC,MALU;MAMVC,UANU;MAOVC,YAPU;MAQVC,MARU;MASVC,QATU;MAUVC,OAVU;MAWVC;IAXU,CAYL;IACL;IACA,KAAKX,EAAL,GAAUA,EAAV;IACAH,GAAG,CAACe,MAAJ,CAAWC,MAAX,CAAkB;MAChBC,WAAW,EAAEb,SADG;MAEhBc,eAAe,EAAEb,SAFD;MAGhBC,YAHgB;MAIhBC,MAAM,EAAEA,MAAM,IAAIY;IAJF,CAAlB;IAOA,MAAMC,MAAM,GAAG;MACbC,MAAM,EAAEV,MADK;MAEbW,GAAG,EAAEb,UAFQ;MAGbc,IAAI,EAAEf;IAHO,CAAf;;IAMA,KAAK,MAAMgB,CAAX,IAAgBd,YAAY,IAAI,EAAhC,EAAoC;MAClC,IAAI,CAACU,MAAM,CAACI,CAAD,CAAX,EAAgB;QACdJ,MAAM,CAACI,CAAD,CAAN,GAAYd,YAAY,CAACc,CAAD,CAAxB;MACD;IACF;;IAED,KAAKf,UAAL,GAAkBA,UAAlB;IACA,KAAKC,YAAL,GAAoBU,MAApB;IACA,KAAKK,OAAL,GAAe,MAAf;IACA,KAAKX,KAAL,GAAaA,KAAK,IAAI,KAAtB;;IAEA,IAAI,CAAC,KAAKJ,YAAL,CAAkBW,MAAvB,EAA+B;MAC7B,MAAM,IAAIK,KAAJ,CAAU,sBAAV,CAAN;IACD;;IAED,KAAKC,MAAL,GAAc,IAAI3B,GAAG,CAAC4B,EAAJ,CAAOC,aAAX,CAAyB;MACrCjB,QAAQ,EAAEA,QAAQ,IAAI,KAAK,IAAL,GAAY,IADG;MAErCkB,SAAS,EAAE,CAF0B;MAGrCjB,OAHqC;MAIrCO;IAJqC,CAAzB,CAAd,CA/BK,CAqCL;;IACA,KAAKO,MAAL,CAAYI,EAAZ,CAAe,oBAAf,EAAsCC,QAAD,IAAc;MACjD,IAAI,KAAKlB,KAAT,EAAgB;QACdmB,OAAO,CAACC,GAAR,CAAa,GAAEF,QAAQ,CAACG,MAAO,MAAKH,QAAQ,CAACI,KAAM,EAAnD;MACD;IACF,CAJD;EAKD,CAzDiC,CA2DlC;;;EACAC,IAAI,CAACC,QAAD,EAAW;IACb,KAAKX,MAAL,CAAYU,IAAZ,CAAiB,CAACE,GAAD,EAAMC,IAAN,KAAe;MAC9B,IAAID,GAAJ,EAAS;QACPN,OAAO,CAACC,GAAR,CAAYK,GAAZ,EAAiBC,IAAjB;MACD;;MACDF,QAAQ,CAACC,GAAD,EAAMC,IAAN,CAAR;IACD,CALD;EAMD;;AAnEiC;;AAsEpCC,MAAM,CAACC,OAAP,GAAiB;EAAEzC;AAAF,CAAjB"},"metadata":{},"sourceType":"script"}